# Backend configuration

# Backend name to identify the backend.
backend_name = "backend-dev"

# Backend host to bind to.
http_host = "127.0.0.1"

# Backend port.
http_port = 8080

# Shared secret between a trusted client and the backend, that must be present
# in the `x-reacher-secret` header of all incoming requests.
# header_secret = "my-secret"

# The name to use during the EHLO/HELO command in the SMTP conversation.
# Ideally, this should match the reverse DNS of the IP address of the server.
hello_name = "reacher"

# The email to use during the MAIL FROM command in the SMTP conversation.
# Ideally, the domain of this email should match the "hello_name" above.
from_email = "reacher@gmail.com"

# The address of the Chrome WebDriver server to use for making headless email
# verifications.
webdriver_addr = "http://localhost:9515"

# Uncomment the following lines to route all SMTP verification requests to the
# specified proxy. Note that the proxy must be a SOCKS5 proxy to work with the
# SMTP protocol. This proxy will not be used for headless verifications.
#
# The username and password are optional, and only needed if the proxy requires
# authentication.
# [proxy]
# host = "my.proxy.com"
# port = 1080
# username = "my-username"
# password = "my-password"

[worker]
enable = true

# Fields below are only used if the worker is enabled.

# Throttle the maximum number of requests per second, per minute, per hour, an
# per day for this worker.
# All fields are optional, comment them out to disable the limit.
#
# Important: these throttle configurations only apply to bulk verification, and
# not to the single /v0/check_email endpoint. The latter endpoint always
# executes the verification immediately, regardless of the throttle settings.
[worker.throttle]
# max_requests_per_second = 20
# max_requests_per_minute = 100
# max_requests_per_hour = 1000
# max_requests_per_day = 20000

# RabbitMQ configuration.
[worker.rabbitmq]
url = "amqp://guest:guest@localhost:5672"

# Queues to consume emails from.
# 
# Queue names are in the format "check.<provider>.<verif_method>", where:
# - <verif_method> is the verification method to use. It can be "smtp",
# "headless", or "api". Note that _not_ all verification methods are
# available for all providers. For example, currently the Headless method
# is not available for Gmail. However, the Smtp method is available for
# all providers.
# - <provider> is the email provider to verify. It can be "gmail", "yahoo",
# "hotmail", or "everything_else".
# 
# Below is the exhaustive list of queue names that the worker can consume from:
# - "check.gmail.smtp": subcribe exclusively to Gmail emails.
# - "check.hotmail.b2b.smtp": subcribe exclusively to Hotmail B2B emails.
# - "check.hotmail.b2c.smtp": subcribe exclusively to Hotmail B2C emails where the verification method is explicity set to SMTP (default method is Headless).
# - "check.hotmail.b2c.headless": subcribe exclusively to Hotmail B2C emails where the verification method is explicity set to Headless (default method is Headless).
# - "check.yahoo.smtp": subcribe exclusively to Yahoo emails where the verification method is explicity set to SMTP (default method is Headless).
# - "check.yahoo.headless": subcribe exclusively to Yahoo emails where the verification method is explicity set to Headless (default method is Headless).
# - "check.everything_else.smtp": subcribe to all emails that are not Gmail, Yahoo, or Hotmail, the method used will be SMTP.
#
# Comment out the queues that you don't want to consume from.
queues = [
    "check.gmail.smtp",
    "check.hotmail.b2b.smtp",
    "check.hotmail.b2c.smtp",
    "check.hotmail.b2c.headless",
    "check.yahoo.smtp",
    "check.yahoo.headless",
    "check.everything_else.smtp",
]

# Number of concurrent emails to verify for this worker, across all queues.
concurrency = 20

# Postgres configuration. Currently, we require a Postgres database to store
# the results of the verifications. This might change in the future, where the
# storage can be pluggable.
[worker.postgres]
db_url = "postgresql://localhost/reacherdb"

# The optional webhook URL to send the results to. This will one POST request
# per email verification, with the result in the body.
# [worker.webhook.on_each_email]
# url = "http://localhost:8080/webhook"
